<!DOCTYPE html>
<html>
  <head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
    <meta http-equiv='cache-control' content='no-cache'>
    <meta http-equiv='expires' content='0'>
    <meta http-equiv='pragma' content='no-cache'>  
    <title>BiG-SCAPE Result</title>
    <link rel="stylesheet" type="text/css" href="../../css/w3.css">
    <link rel="stylesheet" type="text/css" href="../../css/style.css">
  </head>
  <body>
    <script src="../../js/jquery-3.2.1.min.js"></script>
    <script src="../../js/kinetic-v5.1.0.min.js"></script>
    <script src="../../js/Chart.bundle.js"></script>
    <script src="../../js/biojs-io-newick.min.js"></script>
    <script src="../../js/inchlib-1.2.0.1-satria.js"></script>
    <script src="./run_data.js"></script>
    <div class="overviewpage">
        <div class="overviewleft">
            <div class="infocontainer">
              <h3>Run Information</h3>
              <div class="infobar">
                <span class="infoleft">Analysis Started:</span>
                <span id="analysis_started" class="inforight"></span>
              </div>
              <div class="infobar">        
                <span class="infoleft">Parameters:</span>
                <span id="parameters" class="inforight"><b></b></span>
              </div>
              <div class="infobar">
                <span class="infoleft">Analysis Completed:</span>
                <span id="analysis_completed" class="inforight"></span>          
              </div>
            </div>
            <div class="infocontainer">
              <h3>Input Data</h3>
              <div class="infobar">
                <span class="infoleft">Total Number of Genomes:</span>
                <span id="total_accession" class="inforight"></span>          
              </div>
              <div class="infobar">
                <span class="infoleft">Total BGCs:</span>
                <span id="total_bgc" class="inforight"></span>          
              </div>
              <div class="infobar">
                <div style="float: left; width: 250;">
                  <canvas id="bgc_per_acc" width="250" height="250"></canvas>
                </div>
                <div style="float: right; width: 250;">
                  <canvas id="bgc_per_class" width="250" height="250"></canvas>
                </div>  
              </div>
            </div>
          </div>
          <div class="overviewright">
            <div class="infocontainer">
              <h3>Network Overview</h3>
              <div>
                <div id="network_selection" class="network-overview w3-row">
                </div>                 
                <div class="infobar">
                  <span class="infoleft">Number of families:</span>
                  <span id="network_total_families" class="inforight"></span>          
                </div>
                <div class="infobar">
                  <span class="infoleft">Average number of BGCs per family:</span>
                  <span id="network_avg_bgc_in_family" class="inforight"></span>          
                </div>
                <div class="infobar">
                  <span class="infoleft">Max number of BGCs in a family:</span>
                  <span id="network_max_bgc_in_family" class="inforight"></span>          
                </div>
                <div class="infobar">
                  <span class="infoleft">BGC Family x Genome Accession absence/presence:</span>
                </div>
                <div class="infobar">
                  <div id="abpres_heatmap"></div>
                </div>
              </div>
            </div>
          </div>
    </div>
  </body>
  <!-- javascripts -->
  <script type="text/javascript">
    function getRandomColor() {
      var letters = '0123456789ABCDEF';
      var color = '#';
      for (var i = 0; i < 6; i++) {
        color += letters[Math.floor(Math.random() * 16)];
      }
      return color;
    }
    $(document).ready(function(){
      // run information
      $("#analysis_started").html(run_data["start_time"]);
      $("#analysis_completed").html(run_data["end_time"] + " (" + run_data["duration"] + ")");
      $("#parameters").html("<strong>" + run_data["parameters"] + "</strong>");
      // input information
      $("#total_accession").html(run_data["input"]["accession"].length);
      $("#total_bgc").html(run_data["input"]["bgc"].length);
      // pie chart: BGC per Accession
      var pieLabels = [];
      var pieColors = [];
      var pieData = [];
      for (var i in run_data["input"]["accession"]) {
        pieLabels.push(run_data["input"]["accession"][i]["label"]);
        pieColors.push(getRandomColor());
        pieData.push(0);
      }
      for (var i in run_data["input"]["bgc"]) {
        pieData[run_data["input"]["bgc"][i]["acc"]] += 1;
      }
      new Chart(document.getElementById("bgc_per_acc"), {
        type: 'pie',
        data: {
          labels: pieLabels,
          datasets: [{
            label: "",
            backgroundColor: pieColors,
            data: pieData
          }]
        },
        options: {
          title: {
            display: true,
            text: 'BGC per Genome'
          },
          legend: {
            display: false,
          },
          responsive: false,
        }
      });
      // pie chart: BGC per Class
      var pieLabels = [];
      var pieColors = [];
      var pieData = [];
      for (var i in run_data["input"]["classes"]) {
        pieLabels.push(run_data["input"]["classes"][i]["label"]);
        var ccolor = (run_data["input"]["classes"][i].hasOwnProperty("color")?["input"]["classes"][i]["color"]:getRandomColor());
        pieColors.push(ccolor);
        pieData.push(0);
      }
      for (var i in run_data["input"]["bgc"]) {
        pieData[run_data["input"]["bgc"][i]["class"]] += 1;
      }
      new Chart(document.getElementById("bgc_per_class"), {
        type: 'pie',
        data: {
          labels: pieLabels,
          datasets: [{
            label: "",
            backgroundColor: pieColors,
            data: pieData
          }]
        },
        options: {
          title: {
            display: true,
            text: 'BGC per Class'
          },
          legend: {
            display: false,
          },
          responsive: false,
        }
      });
      // Network selector
      $("#network_selection").html("");
      for (var i in run_data["networks"]) {
        var selector = $("<div>" + run_data["networks"][i]["label"] + "</div>").addClass("tablink w3-bottombar w3-hover-light-grey w3-padding").appendTo($("<a href='##' onclick='javascript:viewNetwork(" + i + ");'></a>").appendTo($("#network_selection")));
      }
      viewNetwork(0);
    });
    function viewNetwork(idx) {
      $("#network_selection .tablink").removeClass("w3-border-red");
      $("#network_selection .tablink").eq(idx).addClass("w3-border-red");
      var maxBGC = 0;
      var sumBGC = 0;
      var totalFamily = run_data["networks"][idx]["families"].length;
      for (var i in run_data["networks"][idx]["families"]) {
        var members = run_data["networks"][idx]["families"][i]["members"];
        if (members.length > maxBGC) {
          maxBGC = members.length;
        }
        sumBGC += members.length;
      }
      $("#network_total_families").html(totalFamily);
      $("#network_avg_bgc_in_family").html((sumBGC / totalFamily).toFixed(0));
      $("#network_max_bgc_in_family").html(maxBGC);
      // build inchlib dataset
      var inchlib_data = generateRealHeatmapData(run_data["input"], run_data["networks"][idx]);//generateHeatmapData(100);
      // absence/presence heatmap
      var inchlib = new InCHlib({
          target: "abpres_heatmap",
          metadata: false,
          heatmap_colors: "OrRd",
          draw_row_ids: true,
          dendrogram: false,
          column_dendrogram: false,
          heatmap_part_width: 0.8,
          max_column_width: 17,
          alternative_data: false,
          navigation_toggle: {
            color_scale: false,
            export_button: true,
            hint_button: false,
            filter_button: false,
          },
      });
      inchlib.settings.ranges = [];
      for(i = 0; i < inchlib_data.data.feature_names.length; i++) {
        inchlib.settings.ranges.push([0,1,1]);
      }
      console.log(inchlib_data);
      inchlib.read_data(inchlib_data);
      inchlib.draw();
    }

    function generateRealHeatmapData(input_data, network_data) {
      var parser = require("biojs-io-newick");
      var family_data = network_data["families"];
      var result = {
        "data": {
          "nodes": {},
          "feature_names": []
        },
        "alternative_data": {
          "feature_names": [],
          "nodes": {}
        },
        "column_dendrogram": {
          "nodes": {}
        }
      }
      // build row (accession) dendrogram
      var acc_tree = parser.parse_newick(input_data["accession_newick"]);
      var acc_labels = {};
      for (var i in run_data["input"]["accession"]) {
        acc_labels[run_data["input"]["accession"][i]["id"]] = input_data["accession"][i]["label"];
      }
      var incorporated_accession = get_all_labels_in_tree(acc_tree);
      if ((acc_tree["children"][0]["name"] === undefined) || (acc_tree["children"][0]["name"].length < 1)) { // hack-ish catch
        acc_tree["children"].shift();
      }
      for (var i in run_data["input"]["accession"]) {
        var accId = run_data["input"]["accession"][i]["id"];
        if (incorporated_accession.indexOf(accId) < 0) {
          acc_tree["children"].push({ name: accId, branch_length: 0 });
        }
      }
      result["data"]["nodes"] = tree_to_nodes(acc_tree);
      // build column (family) dendrogram
      var fam_tree = parser.parse_newick(network_data["families_newick"]);
      var incorporated_family = get_all_labels_in_tree(fam_tree);
      if ((fam_tree["children"][0]["name"] === undefined) || (fam_tree["children"][0]["name"].length < 1)) { // hack-ish catch
        fam_tree["children"].shift();
      }
      for (var i in family_data) {
        var famId = family_data[i]["label"];
        if (incorporated_family.indexOf(famId) < 0) {
          fam_tree["children"].push({ name: famId, branch_length: 0 });
        }
      }
      console.log(fam_tree);
      result["column_dendrogram"]["nodes"] = tree_to_nodes(fam_tree);
      // fill features & update label
      var acc_features = {};
      for (var i in run_data["input"]["accession"]) {
        var accId = run_data["input"]["accession"][i]["id"];
        acc_features[accId] = [];
        for (var j = 0; j < family_data.length; j++) {
          acc_features[accId].push(0);
        }
      }
      for (var i in family_data) {
        result["data"]["feature_names"].push(family_data[i]["label"]);
        for (var j in family_data[i]["members"]) {
          var bgcId = family_data[i]["members"][j];
          var accId = run_data["input"]["accession"][run_data["input"]["bgc"][bgcId]["acc"]]["id"];
          acc_features[accId][i] += 1;
        }
      }
      for (var i in result["data"]["nodes"]) {
        var node = result["data"]["nodes"][i];
        if (node.hasOwnProperty("objects")) {
          var accId = node["objects"][0];
          node["objects"][0] = acc_labels[accId];
          node["features"] = acc_features[accId];
        }
      }
      return result;
    }

    function get_all_labels_in_tree(node) {
      var accession_list = [];
      if (node.hasOwnProperty("children")) {
        for (var i = 0; i < node["children"].length; i++) {
          var accessions_children = get_all_labels_in_tree(node["children"][i]);
          for (var j in accessions_children) {
            accession_list.push(accessions_children[j]);
          }
        }
      } else {
        accession_list.push(node["name"]);
      }
      return accession_list;
    }

    function tree_to_nodes(node, parentNode = -1, nodes = {}, leaf_count = 0, node_count = 0, branch_parent_length = 0, branch_total_length = 0) {
        if (node.hasOwnProperty("children")) { // is a node
          node_count++;
          var node_count_pre = node_count;
          for (var i = 0; i < node["children"].length - 1; i++) {    
            var nId = "node_" + (node_count + i);
            var branchLength = branch_parent_length + (i==0?(node.hasOwnProperty("branch_length")?node["branch_length"]:0.00):0.00);
            if (branchLength > branch_total_length) {
              branch_total_length = branchLength;
            }
            nodes[nId] = {
              "parent": (i==0?parentNode:("node_" + (node_count + i - 1))),
              "distance": branchLength,
              "count": 0,
            };
            if (nodes[nId]["parent"] === -1) {
              delete nodes[nId]["parent"];
            }
            if (i < node["children"].length - 2) {
              nodes[nId]["right_child"] = "node_" + (node_count + i + 1);
            }
          }
          node_count += Math.max(0, node["children"].length - 2);
          for (var i = 0; i < node["children"].length; i++) {
            var pId = (i < node["children"].length - 2?(node_count_pre + i):(node_count_pre + node["children"].length - 2));
            var parentChild = "node_" + pId;
            var branchLength = branch_parent_length + (node.hasOwnProperty("branch_length")?node["branch_length"]:0.00);
            var recresult = tree_to_nodes(node["children"][i], parentChild, nodes, leaf_count, node_count, branchLength, 0);
            nodes = recresult[0];
            if (nodes[parentChild].hasOwnProperty("parent")) {
              nodes[nodes[parentChild]["parent"]]["count"] += nodes[parentChild]["count"];
            }
            leaf_count = recresult[1];
            node_count = recresult[2];
            if (recresult[3] > branch_total_length) {
              branch_total_length = recresult[3];
            }
          }
          if (nodes.hasOwnProperty(parentNode)) {
            nodes[parentNode]["left_child"] = "node_" + node_count_pre;
          }
        } else { // is a leaf
          leaf_count++;
          var lId = "leaf_" + leaf_count;
          var branchLength = branch_parent_length + (node.hasOwnProperty("branch_length")?node["branch_length"]:0.00);
          if (branchLength > branch_total_length) {
            branch_total_length = branchLength;
          }
          nodes[lId] = {
            "count": 1,
            "distance": branchLength,
            "features": [],
            "parent": parentNode, 
            "objects": [node["name"]]
          };
          if (nodes[lId]["parent"] === -1) {
            delete nodes[lId]["parent"];
          }
          if (nodes.hasOwnProperty(parentNode)) {
            nodes[parentNode]["count"] += nodes[lId]["count"];
            if (!nodes[parentNode].hasOwnProperty("right_child")) {
              nodes[parentNode]["right_child"] = lId;
            } else {
              nodes[parentNode]["left_child"] = lId;
            }
          }
        }
        if (parentNode == -1) {
          // the root tree, fill left_child & right_child and churn results
          for (var nodeId in nodes) {
            nodes[nodeId]["distance"] = branch_total_length - nodes[nodeId]["distance"];
          }
          return nodes;
        } else {
          // recursive return
          return [nodes, leaf_count, node_count, branch_total_length];
        }        
      }
  </script>
</html>